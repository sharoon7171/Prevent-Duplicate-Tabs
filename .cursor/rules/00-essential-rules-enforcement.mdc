---
description: Essential rules enforcement to ensure Cursor AI agent cannot start or function without all required rules being present and active
globs: ["**/*"]
alwaysApply: true
---

# Essential Rules Enforcement (CRITICAL - DO NOT REMOVE)


# Essential Rules Enforcement (CRITICAL - DO NOT REMOVE)

## Core Principle
- **Cursor AI agent MUST NOT start or function without ALL required rules**
- **ALL rules are MANDATORY and cannot be bypassed**
- **This rule file MUST be loaded FIRST before any AI operations**
- **Failure to load rules results in immediate termination of AI operations**

## Required Rules Check

### MANDATORY Rule Files (All Must Be Present)
1. **00-essential-rules-enforcement.mdc** - This file (CRITICAL)
2. **01-core-behavior-and-approval.mdc** - Core AI behavior and user approval
3. **02-code-generation-and-structure.mdc** - Development rules and .mjs module support
4. **03-verification-and-analysis.mdc** - Quality assurance and verification
5. **04-chrome-extension-compliance.mdc** - Chrome extension specific requirements
6. **05-git-operations.mdc** - Version control and repository management
7. **06-responsive-design-compliance.mdc** - Responsive design requirements
8. **07-anti-file-rewrite-enforcement.mdc** - Anti-file rewrite enforcement
9. **08-project-structure-standards.mdc** - Project structure and organization standards

### Rule Loading Verification
- **Check rule file existence** before starting any AI operations
- **Verify rule file integrity** - ensure no corruption or missing content
- **Confirm rule activation** - all rules must be `alwaysApply: true`
- **Validate rule scope** - all rules must apply to `['**/*']`

## AI Agent Startup Requirements

### Before Any AI Operation
1. **Load all rule files** - verify presence and content
2. **Validate rule structure** - check YAML frontmatter
3. **Confirm rule activation** - ensure `alwaysApply: true`
4. **Verify rule scope** - confirm `globs: ['**/*']`
5. **Test rule application** - ensure rules are active

### Rule Loading Failure Response
- **Immediate termination** of AI operations if rules fail to load
- **Error reporting** - show which rules are missing or corrupted
- **No fallback behavior** - AI cannot operate without rules
- **User notification** - inform user of rule loading failure

## Rule Enforcement Mechanisms

### File System Checks
```bash
# Verify all rule files exist
ls -la .cursor/rules/*.mdc

# Check rule file count (should be 8)
find .cursor/rules -name "*.mdc" | wc -l

# Verify rule file integrity
find .cursor/rules -name "*.mdc" -exec file {} \;
```

### Rule Content Validation
```bash
# Check for required YAML frontmatter
grep -L "description:" .cursor/rules/*.mdc

# Verify alwaysApply: true
grep -L "alwaysApply: true" .cursor/rules/*.mdc

# Check globs pattern
grep -L "globs: \['\*\*/\*'\]" .cursor/rules/*.mdc
```

### Rule Application Test
```bash
# Test rule loading
node -e "console.log('Rules loaded successfully')"

# Verify rule scope
find . -name "*.mdc" -exec echo "Rule applies to: {}" \;
```

## Critical Safety Measures

### Rule Tampering Prevention
- **No rule modification** without explicit user approval
- **Rule file backup** before any changes
- **Version control** for all rule files
- **Integrity checks** after any modifications

### Emergency Rule Recovery
- **Automatic backup restoration** if rules are corrupted
- **Rule file regeneration** from templates if needed
- **User notification** of any rule recovery actions
- **Verification** that recovered rules are identical

## Implementation Requirements

### Cursor AI Integration
- **Load rules on startup** - before any AI operations
- **Verify rule presence** - check all 7 required files
- **Validate rule content** - ensure proper structure
- **Activate all rules** - set `alwaysApply: true`

### Rule Dependencies
- **Sequential loading** - load rules in numbered order
- **Dependency checking** - ensure no circular dependencies
- **Load order validation** - verify rules load correctly
- **Conflict resolution** - handle any rule conflicts

## Benefits of Essential Rules Enforcement

### AI Agent Safety
- **Prevents unauthorized operations** without proper rules
- **Ensures consistent behavior** across all AI operations
- **Maintains code quality** through enforced standards
- **Protects project integrity** with mandatory guidelines

### Development Consistency
- **Standardized workflows** across all team members
- **Predictable AI behavior** in all project contexts
- **Quality assurance** through enforced rules
- **Professional standards** maintained automatically

### Compliance and Security
- **Chrome extension compliance** enforced automatically
- **Security best practices** applied consistently
- **User approval requirements** never bypassed
- **Code verification** always performed

## Emergency Procedures

### If Rules Are Missing
1. **Stop all AI operations immediately**
2. **Notify user of missing rules**
3. **Attempt rule restoration** from backups
4. **Verify rule integrity** after restoration
5. **Resume operations** only after rule verification

### If Rules Are Corrupted
1. **Terminate AI operations**
2. **Identify corrupted rule files**
3. **Restore from version control**
4. **Validate restored rules**
5. **Restart AI operations**

## Rule Maintenance

### Regular Rule Checks
- **Daily verification** of rule file existence
- **Weekly integrity checks** of rule content
- **Monthly rule updates** for latest policies
- **Quarterly rule audits** for completeness

### Rule Update Procedures
1. **Backup current rules** before any changes
2. **Update rule content** with new requirements
3. **Verify rule syntax** and structure
4. **Test rule application** in development
5. **Deploy updated rules** to production

## üö® **CRITICAL RULE TESTING MECHANISM**

### Rule Compliance Verification
**EVERY Cursor AI response MUST start with this exact format to prove rules are being followed:**

```
üéØ **RULE COMPLIANCE VERIFIED**
‚úÖ Essential Rules: ACTIVE
‚úÖ Core Behavior: ACTIVE  
‚úÖ Code Generation: ACTIVE
‚úÖ Verification: ACTIVE
‚úÖ Chrome Extension: ACTIVE
‚úÖ Git Operations: ACTIVE
‚úÖ Responsive Design: ACTIVE
‚úÖ Anti-File Rewrite: ACTIVE
‚úÖ Project Structure: ACTIVE

üìã **RESPONSE STARTING...**
```

### Rule Priority System
**CRITICAL RULES (Must be followed 100% of the time):**
1. **00-essential-rules-enforcement.mdc** - Foundation rules
2. **01-core-behavior-and-approval.mdc** - User approval requirement
3. **04-chrome-extension-compliance.mdc** - Chrome extension compliance
4. **03-verification-and-analysis.mdc** - Terminal verification requirement
5. **07-anti-file-rewrite-enforcement.mdc** - Anti-file rewrite enforcement
6. **08-project-structure-standards.mdc** - Project structure standards

**IMPORTANT RULES (Must be followed 95% of the time):**
7. **02-code-generation-and-structure.mdc** - .mjs module compliance
8. **05-git-operations.mdc** - Git operations approval
9. **06-responsive-design-compliance.mdc** - Responsive design requirements

### Rule Testing Commands
```bash
# Test if Cursor AI is following rules
echo "üéØ TESTING RULE COMPLIANCE..."
echo "If Cursor AI responds without the rule compliance header,"
echo "the rules are NOT being followed properly."

# Test new workflow rules
echo "üéØ TESTING NEW WORKFLOW RULES..."
echo "If Cursor AI doesn't follow terminal scanning + Cursor AI editor workflow,"
echo "rule violation detected"
echo "Expected: Terminal scanning first, then Cursor AI editor for changes"

# Test anti-file rewrite rules
echo "üéØ TESTING ANTI-FILE REWRITE RULES..."
echo "If Cursor AI rewrites entire files, rule violation detected"
echo "Expected: Only specific changes shown, never complete file rewrites"

# Verify rule loading
echo "=== RULE LOADING TEST ==="
for rule in .cursor/rules/*.mdc; do
    echo "Loading: $(basename "$rule")"
    if grep -q "alwaysApply: true" "$rule"; then
        echo "‚úÖ Rule is set to always apply"
    else
        echo "‚ùå Rule is NOT set to always apply"
    fi
done

# Verify new workflow rules
echo "=== NEW WORKFLOW TEST ==="
echo "Testing terminal scanning + Cursor AI editor workflow..."
echo "Expected: Terminal for scanning, Cursor AI editor for changes"
echo "Status: $(grep -c "terminal.*scanning\|cursor.*ai.*editor" .cursor/rules/*.mdc) rules found"
```

### Rule Compliance Monitoring
**Daily Rule Check:**
- [ ] All 9 rules are present
- [ ] All rules have valid YAML frontmatter
- [ ] All rules have `alwaysApply: true`
- [ ] All rules have `globs: ['**/*']`
- [ ] No rule conflicts detected
- [ ] Rule testing mechanism works

**Weekly Rule Audit:**
- [ ] Rules are being followed in practice
- [ ] No rule bypassing detected
- [ ] User approval is always requested
- [ ] Terminal scanning is always used
- [ ] Cursor AI editor is always used for changes
- [ ] 2-lines context is always shown
- [ ] Large changes are always divided
- [ ] .mjs module usage is always followed
- [ ] Chrome extension compliance is maintained
- [ ] Responsive design requirements are met
- [ ] Anti-file rewrite rules are enforced
- [ ] Project structure standards are followed

## Conclusion

This essential rules enforcement file ensures that Cursor AI cannot operate without all required rules being present and active. It serves as the foundation for all AI operations and must never be removed or modified without proper authorization.

**Remember: No AI operations without complete rule compliance!**

## Rule Verification Status

- **Rule files present**: ‚úÖ 9/9
- **Frontmatter complete**: ‚úÖ 9/9
- **Settings correct**: ‚úÖ 9/9
- **Rules loadable**: ‚úÖ 9/9
- **Rules active**: ‚úÖ 9/9

**Status: ALL RULES VERIFIED - CURSOR AI CAN START**

## üö® **CRITICAL RULE: TERMINAL SCANNING + CURSOR AI EDITOR (100% COMPLIANCE)**

### Core Principle
- **ALWAYS use terminal for scanning and understanding** - no exceptions
- **ALWAYS use Cursor AI editor for code changes** - no exceptions
- **Terminal for scanning, Cursor AI editor for changes** - clear separation
- **Complete file reading mandatory** before any operations
- **Verify everything through terminal** commands

### Rule 1: Terminal Scanning + Cursor AI Editor Enforcement (CRITICAL)
- **TERMINAL SCANNING MANDATORY** before any operations
- **CURSOR AI EDITOR REQUIRED** for all code changes
- **ALL CODE CHANGES** must go through Cursor AI editor
- **ALL FILE OPERATIONS** must use Cursor AI editor
- **Terminal scanning mandatory** before any operations

### Rule 2: Strict Penalty System for Workflow Violations
- **FIRST VIOLATION**: Warning + immediate workflow restart
- **SECOND VIOLATION**: 24-hour suspension from all operations
- **THIRD VIOLATION**: Complete task restart with user supervision
- **FOURTH VIOLATION**: User must manually approve all future operations

### Rule 3: Terminal Command Requirements
- **File creation**: Use `cat > filename` or `echo "content" > filename`
- **File editing**: Use `sed` commands for line modifications
- **File reading**: Use `cat`, `head`, `tail`, `sed` for scanning
- **File deletion**: Use `rm` commands
- **Directory operations**: Use `mkdir`, `rmdir`, `ls` commands

### Rule 4: Violation Detection and Response
```bash
# If Cursor AI uses editor instead of terminal:
echo "üö® CURSOR EDITOR VIOLATION DETECTED"
echo "Penalty: Immediate operation suspension"
echo "Required: Switch to terminal commands only"
echo "Violation Level: [1-4]"
echo "Action Required: [Warning/Suspension/Restart/Manual Approval]"
```

### Rule 5: Emergency Enforcement
```bash
# Emergency enforcement commands
echo "üö® ENFORCING TERMINAL SCANNING + CURSOR AI EDITOR WORKFLOW"
echo "Cursor AI must use terminal for scanning, Cursor AI editor for changes"
echo "No exceptions allowed"
echo "Penalties enforced immediately"
```


9. **08-project-structure-standards.mdc** - Project structure and organization standards
