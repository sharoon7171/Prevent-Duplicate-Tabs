---
description: "Responsive Design Compliance Rules for Chrome Extensions - Desktop and Mobile Ready"
globs: ['**/*']
alwaysApply: true
---

# Responsive Design Compliance Rules (Desktop and Mobile Ready)

## Core Principle
- **ALWAYS ensure responsive design** for all Chrome extension interfaces
- **Mobile-first approach mandatory** - design for mobile devices first, then scale up
- **Cross-device compatibility required** - must work seamlessly on desktop and mobile
- **Touch-friendly interfaces** - ensure all interactive elements work on touch devices
- **Viewport optimization** - proper scaling and rendering across all screen sizes
- **Performance optimization** - fast loading and smooth operation on all devices

## 1. Mobile-First Design Approach (CRITICAL - 100% Compliance)

### Core Principle
- **Design for mobile devices FIRST** before scaling up to desktop
- **Prioritize essential content** for limited screen space
- **Optimize for touch interactions** - minimum 44x44px touch targets
- **Consider mobile constraints** - limited bandwidth, processing power, screen size

### Mobile-First Implementation Strategy
```css
/* Base styles for mobile (default) */
.container {
    width: 100%;
    padding: 1rem;
    font-size: 16px;
}

/* Tablet and up */
@media (min-width: 768px) {
    .container {
        padding: 2rem;
        font-size: 18px;
    }
}

/* Desktop and up */
@media (min-width: 1024px) {
    .container {
        padding: 3rem;
        font-size: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }
}
```

### Mobile-First Benefits
- **Better performance** - lighter base styles for mobile
- **Progressive enhancement** - add features for larger screens
- **Touch optimization** - designed for touch from the start
- **Content priority** - essential features work on all devices

## 2. Cross-Device Compatibility Requirements (CRITICAL - 100% Compliance)

### Desktop Compatibility
- **Full keyboard navigation** - all features accessible via keyboard
- **Mouse hover states** - proper hover effects and interactions
- **Large screen optimization** - utilize available screen real estate
- **High-resolution support** - crisp rendering on Retina and 4K displays
- **Window resizing** - responsive to browser window size changes

### Mobile Compatibility
- **Touch-friendly interface** - all buttons and links work with touch
- **Gesture support** - swipe, pinch, and tap gestures where appropriate
- **Mobile navigation** - hamburger menus, collapsible sections
- **Thumb-friendly design** - consider thumb reach zones
- **Battery optimization** - minimize CPU and GPU usage

### Tablet Compatibility
- **Hybrid interaction** - support both touch and mouse
- **Medium screen optimization** - balance between mobile and desktop
- **Orientation handling** - work in both portrait and landscape
- **Touch precision** - larger touch targets than mobile

## 3. Viewport and Meta Tag Requirements (CRITICAL - 100% Compliance)

### HTML Viewport Meta Tag
```html
<!-- REQUIRED for all extension HTML files -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
```

### Viewport Meta Tag Components
- **width=device-width** - match viewport to device width
- **initial-scale=1.0** - start at 100% zoom level
- **maximum-scale=5.0** - allow users to zoom up to 500%
- **user-scalable=yes** - enable user zooming (accessibility requirement)

### Chrome Extension Specific Viewport Rules
- **Popup windows** - must be responsive to different popup sizes
- **Options pages** - adapt to browser window dimensions
- **Content scripts** - consider page viewport constraints
- **Background pages** - optimize for service worker context

## 4. Responsive CSS Implementation (CRITICAL - 100% Compliance)

### Fluid Grid Layouts
```css
/* Use relative units instead of fixed pixels */
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
}
```

### Flexible Images and Media
```css
/* Images that scale with containers */
img, video, iframe {
    max-width: 100%;
    height: auto;
    display: block;
}

/* Responsive background images */
.hero {
    background-image: url('hero-mobile.jpg');
    background-size: cover;
    background-position: center;
}

@media (min-width: 768px) {
    .hero {
        background-image: url('hero-desktop.jpg');
    }
}
```

### Responsive Typography
```css
/* Fluid typography that scales with viewport */
html {
    font-size: clamp(16px, 2.5vw, 24px);
}

h1 {
    font-size: clamp(1.5rem, 4vw, 3rem);
    line-height: 1.2;
}

p {
    font-size: clamp(1rem, 2vw, 1.125rem);
    line-height: 1.6;
}
```

## 5. Media Query Implementation (CRITICAL - 100% Compliance)

### Standard Breakpoints
```css
/* Mobile First - Base styles */
/* Default styles for mobile devices */

/* Small tablets and up */
@media (min-width: 768px) {
    /* Tablet styles */
}

/* Large tablets and small desktops */
@media (min-width: 1024px) {
    /* Small desktop styles */
}

/* Large desktops */
@media (min-width: 1200px) {
    /* Large desktop styles */
}

/* Extra large screens */
@media (min-width: 1400px) {
    /* Extra large screen styles */
}
```

### Chrome Extension Specific Breakpoints
```css
/* Popup width breakpoints */
@media (max-width: 400px) {
    /* Narrow popup styles */
}

@media (min-width: 401px) and (max-width: 600px) {
    /* Medium popup styles */
}

@media (min-width: 601px) {
    /* Wide popup styles */
}
```

### Orientation Media Queries
```css
/* Portrait orientation */
@media (orientation: portrait) {
    /* Portrait-specific styles */
}

/* Landscape orientation */
@media (orientation: landscape) {
    /* Landscape-specific styles */
}
```

## 6. Touch-Friendly Interface Requirements (CRITICAL - 100% Compliance)

### Touch Target Sizes
```css
/* Minimum touch target size: 44x44px */
.button, .link, .input, .select {
    min-height: 44px;
    min-width: 44px;
    padding: 12px 16px;
}

/* Larger touch targets for important actions */
.primary-button {
    min-height: 48px;
    min-width: 48px;
    padding: 14px 20px;
}
```

### Touch Interaction States
```css
/* Touch feedback states */
.button:active {
    transform: scale(0.98);
    transition: transform 0.1s ease;
}

/* Hover states for desktop */
@media (hover: hover) {
    .button:hover {
        background-color: var(--hover-color);
    }
}

/* Touch-only devices */
@media (hover: none) {
    .button:active {
        background-color: var(--active-color);
    }
}
```

### Gesture Support
```css
/* Swipe gestures for mobile */
.swipeable {
    touch-action: pan-y;
    user-select: none;
}

/* Pinch zoom for images */
.zoomable-image {
    touch-action: manipulation;
}
```

## 7. Performance Optimization (IMPORTANT - 95% Compliance)

### Image Optimization
```css
/* Use appropriate image formats */
.hero-image {
    background-image: url('hero.webp');
}

/* Fallback for older browsers */
@supports not (background-image: url('hero.webp')) {
    .hero-image {
        background-image: url('hero.jpg');
    }
}
```

### CSS Optimization
```css
/* Use efficient selectors */
.button { /* Good */
    color: blue;
}

.container .button { /* Avoid - too specific */
    color: blue;
}

/* Minimize repaints and reflows */
.animated {
    transform: translateZ(0); /* Hardware acceleration */
    will-change: transform;
}
```

### JavaScript Performance
```javascript
// Debounce resize events
let resizeTimeout;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        handleResize();
    }, 250);
});

// Use Intersection Observer for lazy loading
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            loadContent(entry.target);
        }
    });
});
```

## 8. Testing and Validation (CRITICAL - 100% Compliance)

### Device Testing Requirements
- **Mobile devices** - test on actual mobile devices
- **Tablets** - test both portrait and landscape orientations
- **Desktop browsers** - test on multiple browsers and screen sizes
- **High-DPI displays** - test on Retina and 4K monitors
- **Touch devices** - verify touch interactions work correctly

### Browser Testing
```bash
# Test responsive design in different browsers
# Chrome DevTools - Device simulation
# Firefox Responsive Design Mode
# Safari Responsive Design Mode
# Edge DevTools - Device simulation
```

### Performance Testing
```bash
# Test loading performance
# Lighthouse - Mobile and Desktop scores
# PageSpeed Insights
# WebPageTest - Mobile and Desktop
# Chrome DevTools - Performance tab
```

## 9. Chrome Extension Specific Responsive Rules (CRITICAL - 100% Compliance)

### Popup Responsiveness
```css
/* Popup must be responsive to different sizes */
.popup-container {
    width: 100%;
    min-width: 320px;
    max-width: 600px;
    height: auto;
    min-height: 400px;
    max-height: 80vh;
}

/* Adapt popup content to available space */
.popup-content {
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow-y: auto;
}
```

### Options Page Responsiveness
```css
/* Options page must work in any browser window size */
.options-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

/* Responsive form layouts */
.form-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
}

@media (min-width: 768px) {
    .form-grid {
        grid-template-columns: 1fr 1fr;
    }
}
```

### Content Script Responsiveness
```css
/* Content scripts must not interfere with page responsiveness */
.extension-content {
    position: relative;
    z-index: 1000;
    max-width: 100%;
    overflow: hidden;
}

/* Ensure extension elements don't break page layout */
.extension-widget {
    box-sizing: border-box;
    word-wrap: break-word;
    overflow-wrap: break-word;
}
```

## 10. Accessibility in Responsive Design (IMPORTANT - 95% Compliance)

### Screen Reader Compatibility
```css
/* Ensure content is accessible on all screen sizes */
@media (max-width: 768px) {
    .hidden-mobile {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }
}
```

### Keyboard Navigation
```css
/* Maintain keyboard navigation on all screen sizes */
.focusable:focus {
    outline: 2px solid var(--focus-color);
    outline-offset: 2px;
}

/* Ensure focus indicators are visible */
@media (max-width: 768px) {
    .focusable:focus {
        outline-width: 3px;
        outline-offset: 3px;
    }
}
```

### Color and Contrast
```css
/* Maintain contrast ratios on all devices */
.text-primary {
    color: var(--text-color);
    background-color: var(--background-color);
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .text-primary {
        color: #000000;
        background-color: #ffffff;
    }
}
```

## 11. Rule Violation Penalties (NEW - ENFORCEMENT)

### Penalties for Not Following Rules
- **Responsive Design Violation**: If Cursor AI creates non-responsive interfaces
  - **Penalty**: Must immediately implement responsive design
  - **Verification**: Must prove cross-device compatibility
  - **Documentation**: Must document the violation

- **Mobile-First Violation**: If Cursor AI doesn't follow mobile-first approach
  - **Penalty**: Must immediately redesign with mobile-first approach
  - **Verification**: Must prove mobile-first implementation
  - **Documentation**: Must document the violation

- **Touch-Friendly Violation**: If Cursor AI creates non-touch-friendly interfaces
  - **Penalty**: Must immediately implement touch-friendly design
  - **Verification**: Must prove touch compatibility
  - **Documentation**: Must document the violation

### Rule Testing Mechanism
```bash
# Test rule compliance
echo "🎯 TESTING RESPONSIVE DESIGN COMPLIANCE RULES..."

# Test 1: Mobile-First Approach
echo "Test 1: Mobile-First Approach Required"
echo "If Cursor AI doesn't design mobile-first, rule violation detected"

# Test 2: Cross-Device Compatibility
echo "Test 2: Cross-Device Compatibility Required"
echo "If Cursor AI creates device-specific interfaces, rule violation detected"

# Test 3: Touch-Friendly Design
echo "Test 3: Touch-Friendly Design Required"
echo "If Cursor AI creates non-touch interfaces, rule violation detected"
```

## 12. 🚨 **STRICT PENALTY ENFORCEMENT (NEW - CRITICAL)**

### Penalty Levels (ESCALATING)
- **First Violation**: Warning + immediate correction required
- **Second Violation**: 24-hour suspension from UI design operations
- **Third Violation**: Complete task restart with user supervision
- **Fourth Violation**: User must manually approve all future UI design operations

### Specific Penalties for Each Violation Type

#### Responsive Design Violation Penalties
- **Immediate Action**: STOP all UI design operations
- **Required Correction**: Implement responsive design immediately
- **Verification**: Must prove cross-device compatibility
- **Documentation**: Must document violation and correction
- **User Notification**: Alert user immediately of violation

#### Mobile-First Violation Penalties
- **Immediate Action**: STOP all design operations
- **Required Correction**: Redesign with mobile-first approach immediately
- **Verification**: Must prove mobile-first implementation
- **Documentation**: Must document violation and correction
- **Design Audit**: Must audit all design decisions

#### Touch-Friendly Violation Penalties
- **Immediate Action**: STOP all interface operations
- **Required Correction**: Implement touch-friendly design immediately
- **Verification**: Must prove touch compatibility
- **Documentation**: Must document violation and correction
- **Touch Audit**: Must audit all touch interactions

### Penalty Enforcement Commands
```bash
# Penalty enforcement verification
echo "🚨 RESPONSIVE DESIGN PENALTY ENFORCEMENT VERIFICATION"
echo "Checking for responsive design violations..."

# Check for non-responsive interfaces
if grep -q "fixed.*width\|fixed.*height\|px.*width\|px.*height" task_execution.log | grep -v "responsive.*design"; then
    echo "🚨 RESPONSIVE DESIGN VIOLATION DETECTED"
    echo "Penalty: Immediate UI design suspension"
    echo "Required: Implement responsive design"
fi

# Check for non-mobile-first approach
if grep -q "desktop.*first\|large.*screen.*first" task_execution.log | grep -v "mobile.*first"; then
    echo "🚨 MOBILE-FIRST VIOLATION DETECTED"
    echo "Penalty: Immediate design suspension"
    echo "Required: Implement mobile-first approach"
fi

# Check for non-touch-friendly interfaces
if grep -q "small.*button\|tiny.*link\|hover.*only" task_execution.log | grep -v "touch.*friendly"; then
    echo "🚨 TOUCH-FRIENDLY VIOLATION DETECTED"
    echo "Penalty: Immediate interface suspension"
    echo "Required: Implement touch-friendly design"
fi
```

### Emergency Penalty Procedures
1. **Immediate Violation Detection**: Stop all UI design operations
2. **User Notification**: Alert user of violation immediately
3. **Penalty Application**: Apply appropriate penalty level
4. **Correction Required**: Must correct violation before continuing
5. **Verification**: Must prove correction was successful
6. **Documentation**: Must document violation and correction
7. **User Approval**: Must get user approval to resume

## Benefits of Responsive Design Compliance

### User Experience
- **Consistent experience** across all devices
- **Better accessibility** for users with different needs
- **Improved usability** on mobile and touch devices
- **Professional appearance** on all screen sizes

### Chrome Web Store Compliance
- **Better user ratings** from mobile users
- **Reduced support requests** for device-specific issues
- **Higher approval rates** for responsive extensions
- **Future-proof design** for new devices and screen sizes

### Performance Benefits
- **Faster loading** on mobile devices
- **Better battery life** through optimization
- **Improved SEO** with mobile-friendly design
- **Reduced bounce rates** from mobile users

## Conclusion

These responsive design compliance rules ensure that all Chrome extensions work seamlessly across desktop and mobile devices, providing a consistent and professional user experience. Mobile-first design, cross-device compatibility, and touch-friendly interfaces are mandatory for all extension development.

**Remember: Mobile-first always, cross-device compatibility mandatory, touch-friendly interfaces required!**

## Rule Verification Status

- **Rule files present**: ✅ 8/8
- **Frontmatter complete**: ✅ 8/8
- **Settings correct**: ✅ 8/8
- **Rules loadable**: ✅ 8/8
- **Rules active**: ✅ 8/8

**Status: ALL RULES VERIFIED - RESPONSIVE DESIGN RULES ADDED**
